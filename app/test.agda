module test where

open import Data.List using (List; []; _‚à∑_; foldl)
open import Data.Char using (Char; toNat)
open import Data.String using (String; _++_; toList)
open import Data.Unit using (‚ä§)
open import Data.Nat as N using (‚Ñï; zero)
open import Data.Nat.Show using (show)
open import Data.Product using (_√ó_; _,_; proj‚ÇÅ)
open import Relation.Nullary using (yes; no)
open import IO using (IO; run; putStrLn)
open import Coinduction using (‚ôØ_)
open import Function using (_‚àò_; _$_)

open import cry.ec using (module test)
open test

_>>=_ : ‚àÄ {a} {A B : Set a} ‚Üí IO A ‚Üí (A ‚Üí IO B) ‚Üí IO B
m >>= f = ‚ôØ m IO.>>= Œª a ‚Üí ‚ôØ f a

_>>_ : ‚àÄ {a} {A B : Set a} ‚Üí IO A ‚Üí IO B ‚Üí IO B
m >> n = ‚ôØ m IO.>> ‚ôØ n

showElem : ùîΩ ‚Üí String
showElem (n , _) = show n

read‚ÇÅ‚ÇÄ : ‚Ñï ‚Üí List Char ‚Üí ‚Ñï √ó List Char
read‚ÇÅ‚ÇÄ n [] = n , []
read‚ÇÅ‚ÇÄ n (c ‚à∑ cs) with toNat '0' N.‚â§? toNat c
... | no _ = n , cs
... | yes _ with toNat c N.‚â§? toNat '9'
... | no _ = n , cs
... | yes _ = read‚ÇÅ‚ÇÄ (10 N.* n N.+ (toNat c N.‚à∏ toNat '0')) cs

readsElem : List Char ‚Üí ùîΩ √ó List Char
readsElem cs with read‚ÇÅ‚ÇÄ 0 cs
... | n , cs‚Ä≤ = (n , prf) , cs‚Ä≤ where
  postulate prf : _

readElem : String ‚Üí ùîΩ
readElem = proj‚ÇÅ ‚àò readsElem ‚àò toList

showPoint : Point ‚Üí String
showPoint ((x , y , z) , _) = showElem x ++ ":" ++ showElem y ++ ":" ++ showElem z

readsPoint : List Char ‚Üí Point √ó List Char
readsPoint s with readsElem s
... | x , s‚Ä≤ with readsElem s‚Ä≤
... | y , s‚Ä≥ with readsElem s‚Ä≥
... | z , s‚Ä¥ = ((x , y , z) , prf) , s‚Ä¥ where
  postulate prf : _

readPoint : String ‚Üí Point
readPoint = proj‚ÇÅ ‚àò readsPoint ‚àò toList

showPoint‚Ä≤ : Point ‚Üí String
showPoint‚Ä≤ p = showPoint p ++ " = " ++ showPoint (aff p)

main‚Ä≤ : IO ‚ä§
main‚Ä≤ = do
  let
    p = readPoint "4,2,1"
    2p = dbl p
    3p = add 2p p
    3p‚Ä≤ = add p 2p
    4p = dbl 2p
    4p‚Ä≤ = add p 3p
    4p‚Ä≥ = add p 3p‚Ä≤
    5p = add 4p p
    5p‚Ä≤ = add 2p 3p
  putStrLn ("p = " ++ showPoint‚Ä≤ p)
  putStrLn ("2p = " ++ showPoint‚Ä≤ 2p)
  putStrLn ("3p = " ++ showPoint‚Ä≤ 3p)
  putStrLn ("3p‚Ä≤ = " ++ showPoint‚Ä≤ 3p‚Ä≤)
  putStrLn ("4p = " ++ showPoint‚Ä≤ 4p)
  putStrLn ("4p‚Ä≤ = " ++ showPoint‚Ä≤ 4p‚Ä≤)
  putStrLn ("4p‚Ä≥ = " ++ showPoint‚Ä≤ 4p‚Ä≥)
  putStrLn ("5p = " ++ showPoint‚Ä≤ 5p)
  putStrLn ("4p‚Ä≤ = " ++ showPoint‚Ä≤ 5p‚Ä≤)

main = run main‚Ä≤
