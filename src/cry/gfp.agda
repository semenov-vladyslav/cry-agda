module cry.gfp where

import Data.Bool as B
import Data.Nat as N
import Data.Nat.DivMod as N/
import Data.Nat.Divisibility as N‚à£
-- import Data.Nat.Primality as N‚Ä≤
import Data.Nat.Properties as Np
import Data.Fin as F
import Data.Product as P
import Data.Unit as U

open import Relation.Nullary using (Dec; yes; no)
open import Relation.Nullary.Decidable using (False; True; ‚åä_‚åã)
open import Relation.Binary using (Decidable; Rel)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong)
open import Function using (case_of_)
open import Algebra using (RawRing)
open import Algebra.Structures using ()
open import Algebra.FunctionProperties using (Op‚ÇÅ; Op‚ÇÇ)

import Level as L

record RawField c ‚Ñì : Set (L.suc (c L.‚äî ‚Ñì)) where
  infix  10 _‚Åª¬π
  infix  9 -_
  infixl 8 _¬≤
  infixl 7 _*_
  infixl 6 _+_ _-_
  infix  4 _‚âà_
  field
    Carrier : Set c
    _‚âà_     : Rel Carrier ‚Ñì
    _‚âà?_    : Decidable _‚âà_
    _+_     : Op‚ÇÇ Carrier
    _-_     : Op‚ÇÇ Carrier
    _*_     : Op‚ÇÇ Carrier
    _¬≤      : Op‚ÇÅ Carrier
    -_      : Op‚ÇÅ Carrier
    _‚Åª¬π     : Op‚ÇÅ Carrier
    0#      : Carrier
    1#      : Carrier

  rawRing : RawRing _
  rawRing = record
    { Carrier = Carrier
    ; _+_ = _+_
    ; _*_ = _*_
    ; -_ = -_
    ; 0# = 0#
    ; 1# = 1#
    }


-- GF(p): ring of integers modulo prime (without division)
module _ where
  open B using (T)
  open N using (‚Ñï; zero; suc; _<_)
  open N/ using (_divMod_; result)
  open N‚à£ using (_‚à§_)
  open Np using (‚â§-trans)
  open F using (Fin; to‚Ñï)
  -- open N‚Ä≤ renaming (Prime to is-prime)
  open P using (Œ£; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
  open U using (tt)

  is-prime‚Ä≥ : ‚Ñï ‚Üí Set
  is-prime‚Ä≥ p = (‚àÄ n ‚Üí (n<p : n < p) ‚Üí (2 N.+ n) ‚à§ (2 N.+ p))

  Prime‚Ä≥ : Set
  Prime‚Ä≥ = Œ£ ‚Ñï is-prime‚Ä≥

  private
    f<p : ‚àÄ {p} ‚Üí (f : Fin p) ‚Üí to‚Ñï f < p
    f<p {zero} ()
    f<p {suc p} Fin.zero = N.s‚â§s N.z‚â§n
    f<p {suc p} (Fin.suc f) = N.s‚â§s (f<p f)

    p<1+p : ‚àÄ p ‚Üí p < suc p
    p<1+p zero = N.s‚â§s N.z‚â§n
    p<1+p (suc p) = N.s‚â§s (p<1+p p)
    p‚â§1+p : ‚àÄ p ‚Üí p N.‚â§ suc p
    p‚â§1+p zero = N.z‚â§n
    p‚â§1+p (suc p) = N.s‚â§s (p‚â§1+p p)

    p-sn<p : ‚àÄ {p n} ‚Üí (n<p : suc n N.< p) ‚Üí (p N.‚à∏ (suc n) N.< p)
    p-sn<p {zero} {n} ()
    p-sn<p {suc p} {zero} (N.s‚â§s n<p) = p<1+p p
    p-sn<p {suc p} {suc n} (N.s‚â§s n<p) = ‚â§-trans (p-sn<p {p} {n} n<p) (p‚â§1+p p)

  to‚Ñï‚Ä≤ : ‚àÄ {p} ‚Üí Fin p ‚Üí Œ£ ‚Ñï (N._< p)
  to‚Ñï‚Ä≤ f = to‚Ñï f , f<p f

  gfp : Prime‚Ä≥ ‚Üí RawField _ _
  gfp P = record
    { Carrier = ùîΩ
    ; _‚âà_ = _==_
    ; _‚âà?_ = _‚âü_
    ; _+_ = _+_
    ; _-_ = _-_
    ; _*_ = _*_
    ; _¬≤ = _¬≤
    ; -_ = -_
    ; _‚Åª¬π = _‚Åª¬π
    ; 0# = 0#
    ; 1# = 1#
    } where
      p = 2 N.+ proj‚ÇÅ P
      p-is-prime = proj‚ÇÇ P
      p‚â†0 : False (p N.‚âü 0)
      p‚â†0 = tt

      ùîΩ : Set
      ùîΩ = Œ£ ‚Ñï (N._< (2 N.+ proj‚ÇÅ P)) -- N._< p

      toùîΩ = to‚Ñï‚Ä≤ {p}

      _==_ : ùîΩ ‚Üí ùîΩ ‚Üí Set
      (x , _) == (y , _) = x ‚â° y

      uip : ‚àÄ {z} {t} ‚Üí (p‚ÇÅ p‚ÇÇ : z N.< t) ‚Üí p‚ÇÅ ‚â° p‚ÇÇ
      uip {zero} (N.s‚â§s N.z‚â§n) (N.s‚â§s N.z‚â§n) = refl
      uip {suc z} (N.s‚â§s p‚ÇÅ) (N.s‚â§s p‚ÇÇ) = cong N.s‚â§s (uip {z} p‚ÇÅ p‚ÇÇ)

      _‚âü_ : (x y : ùîΩ) ‚Üí Dec (x == y)
      (x , px) ‚âü (y , py) with x N.‚âü y
      ((x , px) ‚âü (y , py)) | yes x=y rewrite x=y | uip px py = yes refl
      ((x , px) ‚âü (y , py)) | no x‚â†y = no (Œª x=y ‚Üí x‚â†y x=y)

      ==-refl : ‚àÄ {x} ‚Üí x == x
      ==-refl = refl

      ==-sym : ‚àÄ {x y} ‚Üí x == y ‚Üí y == x
      ==-sym = sym

      infix  10 _‚Åª¬π
      infix  9 -_
      infixl 8 _¬≤
      infixl 7 _*_
      infixl 6 _+_ _-_

      _+_ : ùîΩ ‚Üí ùîΩ ‚Üí ùîΩ
      (n , _) + (m , _) with ((n N.+ m) divMod p) {p‚â†0}
      ... | (result _ r _) = toùîΩ r

      _*_ : ùîΩ ‚Üí ùîΩ ‚Üí ùîΩ
      (n , _) * (m , _) with ((n N.* m) divMod p) {p‚â†0}
      ... | (result _ r _) = toùîΩ r

      _¬≤ : ùîΩ ‚Üí ùîΩ
      x ¬≤ = x * x

      -_ : ùîΩ ‚Üí ùîΩ
      - (zero , prf) = (zero , prf)
      - (suc n , prf) = (p N.‚à∏ (suc n) , p-sn<p prf)

      _-_ : ùîΩ ‚Üí ùîΩ ‚Üí ùîΩ
      x - y = x + (- y)

      0# : ùîΩ
      0# = 0 , N.s‚â§s N.z‚â§n

      1# : ùîΩ
      1# = 1 , N.s‚â§s (N.s‚â§s N.z‚â§n)

      _^_ : ùîΩ ‚Üí ‚Ñï ‚Üí ùîΩ
      x ^ 0 = 1#
      x ^ (N.suc n) = x * (x ^ n)

      _‚Åª¬π : ùîΩ ‚Üí ùîΩ
      x ‚Åª¬π = x ^ (p N.‚à∏ 2)

    {-
    +-assoc : Associative _==_ _+_
    +-assoc (x , _) (y , _) (z , _) with ((x N.+ y) divMod p) {p‚â†0} | ((y N.+ z) divMod p) {p‚â†0}
    ... | result q‚ÇÅ r‚ÇÅ p‚ÇÅ | result q‚ÇÇ r‚ÇÇ p‚ÇÇ = {!!}
    -- x N.+ y N.+ z ‚â° x N.+ to‚Ñï r‚ÇÇ N.+ q‚ÇÇ N.* p
    -- x N.+ y N.+ z ‚â° to‚Ñï r‚ÇÅ N.+ z N.+ q‚ÇÅ N.* p

    *-assoc : Associative _==_ _*_
    *-assoc (x , _) (y , _) (z , _) with ((x N.* y) divMod p) {p‚â†0} | ((y N.* z) divMod p) {p‚â†0}
    ... | result q‚ÇÅ r‚ÇÅ p‚ÇÅ | result q‚ÇÇ r‚ÇÇ p‚ÇÇ = {!!}

    0-id : Identity _==_ 0# _+_
    0-id = (Œª
      { x ‚Üí {!!}}) , {!!}

    ring : Ring _ _
    ring = record
      { Carrier = ùîΩ
      ; _‚âà_ = _==_ -- _‚â°_
      ; _+_ = _+_
      ; _*_ = _*_
      ; -_ = -_
      ; 0# = 0#
      ; 1# = 1#
      ; isRing = record
        { +-isAbelianGroup = record
          { isGroup = record
            { isMonoid = record
              { isSemigroup = record
                { isEquivalence = record
                  { refl = refl
                  ; sym = sym
                  ; trans = trans
                  }
                ; assoc = {!!}
                ; ‚àô-cong = {!!}
                }
              ; identity = 0-id
              }
            ; inverse = {!!}
            ; ‚Åª¬π-cong = {!!}
            }
          ; comm = {!!}
          }
        ; *-isMonoid = {!!}
        ; distrib = {!!}
        }
      }
    -}

test : _
test = g where
  7-prime : _
  7-prime = Œª
    { 0 n<p (N‚à£.divides 0 ())
    ; 0 _ (N‚à£.divides 1 ())
    ; 0 _ (N‚à£.divides 2 ())
    ; 0 _ (N‚à£.divides 3 ())
    ; 0 _ (N‚à£.divides (N.suc (N.suc (N.suc (N.suc q)))) ())
    ; 1 _ (N‚à£.divides 0 ())
    ; 1 _ (N‚à£.divides 1 ())
    ; 1 _ (N‚à£.divides 2 ())
    ; 1 _ (N‚à£.divides (N.suc (N.suc (N.suc q))) ())
    ; 2 _ (N‚à£.divides 0 ())
    ; 2 _ (N‚à£.divides 1 ())
    ; 2 _ (N‚à£.divides (N.suc (N.suc q)) ())
    ; 3 _ (N‚à£.divides 0 ())
    ; 3 _ (N‚à£.divides 1 ())
    ; 3 _ (N‚à£.divides (N.suc (N.suc q)) ())
    ; 4 _ (N‚à£.divides 0 ())
    ; 4 _ (N‚à£.divides 1 ())
    ; 4 _ (N‚à£.divides (N.suc (N.suc q)) ())
    ; (N.suc (N.suc (N.suc (N.suc (N.suc n)))))
      (N.s‚â§s (N.s‚â§s (N.s‚â§s (N.s‚â§s (N.s‚â§s ()))))) x
    }
  P : Prime‚Ä≥
  P = 5 P., 7-prime

  g = gfp P
